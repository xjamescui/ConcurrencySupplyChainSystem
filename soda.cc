_Monitor MPRNG {
    unsigned int seed_; 
  public:
    MPRNG( unsigned int seed = 1009 ) : seed_( seed ) { srand( seed ); } // set seed
    unsigned int seed() { return seed_; }        // set seed
    void seed( unsigned int seed ) { seed_ = seed; srand( seed ); } // set seed
    unsigned int operator()() { return rand(); } // [0,UINT_MAX]
    unsigned int operator()( unsigned int u ) { return operator()() % (u + 1); } // [0,u]
    unsigned int operator()( unsigned int l, unsigned int u ) { return operator()( u - l ) + l; } // [l,u]
}; // MPRNG

SodaCost                2    # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents             2    # number of students to create
MaxPurchases            8    # maximum number of bottles a student purchases
NumVendingMachines      3    # number of vending machines
MaxStockPerFlavour      5    # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour    3    # maximum number of bottles of each flavour generated by the bottling
                             #    plant per production run
TimeBetweenShipments    3    # length of time between shipment pickup
ParentalDelay           2    # length of time between new deposits of funds
NumCouriers             1    # maximum number of couriers in the pool

struct ConfigParms {
    unsigned int sodaCost;                 // MSRP per bottle
    unsigned int numStudents;              // number of students to create
    unsigned int maxPurchases;             // maximum number of bottles a student purchases
    unsigned int numVendingMachines;       // number of vending machines
    unsigned int maxStockPerFlavour;       // maximum number of bottles of each flavour stocked
    unsigned int maxShippedPerFlavour;     // number of bottles of each flavour in a shipment
    unsigned int timeBetweenShipments;     // length of time between shipment pickup
    unsigned int parentalDelay;            // length of time between cash deposits
    unsigned int numCouriers;              // number of couriers in the pool
};

void processConfigFile( const char *configFile, ConfigParms &cparms );

_Task Student {
    void main();
  public:
    Student( Printer &prt, NameServer &nameServer, WATCardOffice &cardOffice, unsigned int id,
             unsigned int maxPurchases );
};

class WATCard {
    WATCard( const WATCard & );            // prevent copying
    WATCard &operator=( const WATCard & );
  public:
    WATCard();
    typedef Future_ISM<WATCard *> FWATCard; // future watcard pointer
    void deposit( unsigned int amount );
    void withdraw( unsigned int amount );
    unsigned int getBalance();
};

_Task WATCardOffice {
    struct Job {                           // marshalled arguments and return future
        Args args;                         // call arguments (YOU DEFINE "Args")
        WATCard::FWATCard result;          // return future
        Job( Args args ) : args( args ) {}
    };
    _Task Courier { ... };                 // communicates with bank

    void main();
  public:
    _Event Lost {};                        // lost WATCard
    WATCardOffice( Printer &prt, Bank &bank, unsigned int numCouriers );
    WATCard::FWATCard create( unsigned int sid, unsigned int amount );
    WATCard::FWATCard transfer( unsigned int sid, unsigned int amount, WATCard *card );
    Job *requestWork();
};

_Monitor Bank {
  public:
    Bank( unsigned int numStudents );
    void deposit( unsigned int id, unsigned int amount );
    void withdraw( unsigned int id, unsigned int amount );
};

_Task Parent {
    void main();
  public:
    Parent( Printer &prt, Bank &bank, unsigned int numStudents, unsigned int parentalDelay );
};

_Task VendingMachine {
    void main();
  public:
    enum Flavours { ... };                 // flavours of soda (YOU DEFINE)
    _Event Funds {};                       // insufficient funds
    _Event Stock {};                       // out of stock for particular flavour
    VendingMachine( Printer &prt, NameServer &nameServer, unsigned int id, unsigned int sodaCost,
                    unsigned int maxStockPerFlavour );
    void buy( Flavours flavour, WATCard &card );
    unsigned int *inventory();
    void restocked();
    _Nomutex unsigned int cost();
    _Nomutex unsigned int getId();
};

_Task NameServer {
    void main();
  public:
    NameServer( Printer &prt, unsigned int numVendingMachines, unsigned int numStudents );
    void VMregister( VendingMachine *vendingmachine );
    VendingMachine *getMachine( unsigned int id );
    VendingMachine **getMachineList();
};

_Task BottlingPlant {
    void main();
  public:
    _Event Shutdown {};                    // shutdown plant
    BottlingPlant( Printer &prt, NameServer &nameServer, unsigned int numVendingMachines,
                 unsigned int maxShippedPerFlavour, unsigned int maxStockPerFlavour,
                 unsigned int timeBetweenShipments );
    void getShipment( unsigned int cargo[] );
};

_Task Truck {
    void main();
  public:
    Truck( Printer &prt, NameServer &nameServer, BottlingPlant &plant,
           unsigned int numVendingMachines, unsigned int maxStockPerFlavour );
};

_Monitor / _Cormonitor Printer {
  public:
    enum Kind { Parent, WATCardOffice, NameServer, Truck, BottlingPlant, Student, Vending, Courier };
    Printer( unsigned int numStudents, unsigned int numVendingMachines, unsigned int numCouriers );
    void print( Kind kind, char state );
    void print( Kind kind, char state, int value1 );
    void print( Kind kind, char state, int value1, int value2 );
    void print( Kind kind, unsigned int lid, char state );
    void print( Kind kind, unsigned int lid, char state, int value1 );
    void print( Kind kind, unsigned int lid, char state, int value1, int value2 );
};
